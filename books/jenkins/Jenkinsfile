pipeline {
    options {
        // set a timeout of 60 minutes for this pipeline
        timeout(time: 60, unit: 'MINUTES')
    }
    agent {
      node {
        label 'nodejs'
      }
    }

    environment {
        //TODO: Edit these vars as per your env
        DEV_PROJECT = "cicd"
        STAGE_PROJECT = "microservices-dev"
        APP_GIT_URL = "https://github.com/pornpasok/DO288-apps"
        //NEXUS_SERVER = "http://nexus-common.apps.cluster.domain.example.com/repository/nodejs"
        NEXUS_SERVER = ""

        // DO NOT CHANGE THE GLOBAL VARS BELOW THIS LINE
        APP_NAME = "books"
    }


    stages {

        stage('NPM Install') {
            steps {
                echo '### Installing NPM dependencies ###'
                sh '''
                        #npm config set registry ${NEXUS_SERVER}
                        cd books
                        npm install
                   '''
            }
        }

        stage('Run Unit Tests') {
            steps {
                echo '### Running unit tests ###'
                sh 'cd books; npm test'
            }
        }

        stage('Run Linting Tools') {
            steps {
                echo '### Running eslint on code ###'
                sh 'cd books; npm run lint'
            }
        }

        stage('Create Image Builder') {
            when {
                expression {
                    openshift.withCluster() {
                    openshift.withProject(DEV_PROJECT) {
                        return !openshift.selector("bc", "${APP_NAME}").exists();
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(DEV_PROJECT) {
                            openshift.newBuild("--name=${APP_NAME}", "nodejs:8~${APP_GIT_URL}", "--context-dir ${APP_NAME}")
                        }
                    }
                }
            }
        }

        stage('Build Image') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.selector("bc", "${APP_NAME}").startBuild()
                    }
                }
            }
        }

        stage('Wait for S2I build to complete') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def bc = openshift.selector("bc", "${APP_NAME}")
                            bc.logs('-f')
                            def builds = bc.related('builds')
                            builds.untilEach(1) {
                                return (it.object().status.phase == "Complete")
                            }
                        }
                    }
                }
            }
        }

        stage('Promote to DEV') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.tag("${APP_NAME}:latest", "${APP_NAME}:dev")
                    }
                }
            }
        }

        stage('Create DEV') {
            when {
                expression {
                    openshift.withCluster() {
                        return !openshift.selector("dc", "${APP_NAME}-dev").exists()
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.newApp("${APP_NAME}:latest", "--name=${APP_NAME}-dev").narrow('svc').expose()
                    }
                }
            }
        }

        stage('Wait for deployment in DEV env') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject( "${DEV_PROJECT}" ) {
                            def deployment = openshift.selector("dc", "${APP_NAME}-dev").rollout()
                            openshift.selector("dc", "${APP_NAME}").related('pods').untilEach(1) {
                                return (it.object().status.phase == "Running")
                            }
                        }
                    }
                }
            }
        }

        stage('Promote STAGE') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.tag("${APP_NAME}:dev", "${APP_NAME}:stage")
                    }
                }
            }
        }

        stage('Create STAGE') {
            when {
                expression {
                    openshift.withCluster() {
                        return !openshift.selector("dc", "${APP_NAME}-stage").exists()
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.newApp("${APP_NAME}:stage", "--name=${APP_NAME}-stage").narrow('svc').expose()
                    }
                }
            }
        }
        
    
        
    }
}
